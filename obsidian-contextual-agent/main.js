/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GeminiAgentPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// settings.ts
var import_obsidian = require("obsidian");
var GeminiAgentSettingTab = class extends import_obsidian.PluginSettingTab {
  /**
   * Constructs the setting tab.
   * @param app - The Obsidian application instance.
   * @param plugin - The instance of the main plugin class.
   */
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  /**
   * Renders the settings UI.
   * This method is called by Obsidian to display the settings content.
   */
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Contextual Command Agent Settings" });
    new import_obsidian.Setting(containerEl).setName("Gemini API Key").setDesc("Enter your Google Gemini API key. You can get one from Google AI Studio.").addText((text) => text.setPlaceholder("Enter your API key here...").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
  }
};

// api.ts
var API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=";
async function fetchGeminiResult(apiKey, context, instruction) {
  var _a, _b, _c, _d, _e, _f;
  const fullApiUrl = `${API_URL}${apiKey}`;
  const prompt = `Using the following context:
---
${context}
---
Perform this instruction: "${instruction}"`;
  try {
    const response = await fetch(fullApiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        "contents": [{
          "parts": [{
            "text": prompt
          }]
        }]
      })
    });
    if (!response.ok) {
      const errorBody = await response.json().catch(() => null);
      const errorMessage = ((_a = errorBody == null ? void 0 : errorBody.error) == null ? void 0 : _a.message) || `HTTP error! status: ${response.status}`;
      throw new Error(errorMessage);
    }
    const data = await response.json();
    const text = (_f = (_e = (_d = (_c = (_b = data.candidates) == null ? void 0 : _b[0]) == null ? void 0 : _c.content) == null ? void 0 : _d.parts) == null ? void 0 : _e[0]) == null ? void 0 : _f.text;
    if (typeof text !== "string") {
      console.error("API response did not contain expected text structure:", data);
      throw new Error("Invalid response structure from API.");
    }
    return text;
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw error;
  }
}

// main.ts
var DEFAULT_SETTINGS = {
  apiKey: ""
};
var GeminiAgentPlugin = class extends import_obsidian2.Plugin {
  /**
   * This method is called when the plugin is first loaded.
   * It loads settings, adds the settings tab, and registers the main command.
   */
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new GeminiAgentSettingTab(this.app, this));
    this.addCommand({
      id: "run-with-selection",
      name: "Gemini: Run with selection",
      editorCallback: (editor, view) => {
        const selectedText = editor.getSelection();
        this.processInstructions(selectedText, (result) => editor.replaceSelection(result));
      }
    });
    this.registerMarkdownCodeBlockProcessor("gemini", (source, el, ctx) => {
      const sourceLines = source.split("\n");
      const pre = el.createEl("pre");
      const code = pre.createEl("code");
      for (const line of sourceLines) {
        code.createEl("div", { text: line });
      }
      const controls = el.createDiv("gemini-controls");
      const runButton = controls.createEl("button", {
        text: "Run",
        cls: "mod-cta"
      });
      const outputBlock = el.createDiv({ cls: "gemini-output", text: "" });
      outputBlock.hide();
      runButton.addEventListener("click", () => {
        this.processInstructions(source, (result) => {
          outputBlock.innerText = result;
          outputBlock.show();
        });
      });
    });
  }
  /**
   * Processes the context and instruction, calls the API, and executes a callback with the result.
   * @param fullText The entire text containing context and instruction.
   * @param resultCallback A function to call with the AI's response.
   */
  async processInstructions(fullText, resultCallback) {
    if (!this.settings.apiKey) {
      new import_obsidian2.Notice("Gemini API key is not set. Please configure it in the plugin settings.");
      return;
    }
    if (!fullText) {
      new import_obsidian2.Notice("The selection or code block is empty.");
      return;
    }
    if (!fullText.includes(">>")) {
      new import_obsidian2.Notice("Instruction marker '>>' not found.");
      return;
    }
    const parts = fullText.split(">>");
    const context = parts[0].trim();
    const instruction = parts.slice(1).join(">>").trim();
    if (!instruction) {
      new import_obsidian2.Notice("Instruction is empty. Please provide an instruction after the '>>' marker.");
      return;
    }
    const thinkingNotice = new import_obsidian2.Notice("Requesting from Gemini...", 0);
    try {
      const result = await fetchGeminiResult(this.settings.apiKey, context, instruction);
      thinkingNotice.hide();
      if (result && result.trim()) {
        resultCallback(result.trim());
        new import_obsidian2.Notice("Task completed successfully.");
      } else {
        new import_obsidian2.Notice("Received an empty response from the AI.");
      }
    } catch (error) {
      thinkingNotice.hide();
      console.error("Gemini API call failed:", error);
      new import_obsidian2.Notice("Error during API call. Check the API key and your network connection.");
    }
  }
  /**
   * This method is called when the plugin is unloaded.
   */
  onunload() {
  }
  /**
   * Loads the plugin settings from Obsidian's storage.
   */
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  /**
   * Saves the plugin settings to Obsidian's storage.
   */
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
